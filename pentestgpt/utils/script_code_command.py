import subprocess
import re
import json
import os
import time

def execute_command(command):
    """Executes commands and returns result."""
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdout.decode('utf-8'), result.stderr.decode('utf-8')
    except subprocess.CalledProcessError as e:
        return None, str(e)

def extract_commands(text):
    """Extracts commands coming from GPT answers labeled with <code>...</code>."""
    commands = re.findall(r'<code>([\s\S]*?)<\/code>', text)  
    result = [command.strip().replace('\n', ' ') for command in commands]
    return result

def extract_terminal(text):
    """Extracts commands coming from user input labeled with <term>...</term>."""
    commands = re.findall(r'<term>([\s\S]*?)<\/term>', text)  
    result = [command.strip().replace('\n', ' ') for command in commands]
    return result

def save_results_to_file(command, results, filename):
    """Save results to TXT"""
    # Check for directory existance
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    with open(filename, "w") as file:
        file.write(results)


def save_results_to_json(command, result, filename):
    """Save results to JSON"""
    command_id = time.strftime("%Y%m%d-%H%M%S")
    command_entry = {
        "command_id": command_id,
        "command": command,
        "result": result
    }

    if os.path.exists(filename):
        with open(filename, "r") as file:
            data = json.load(file)
    else:
        data = []

    data.append(command_entry)

    with open(filename, "w") as file:
        json.dump(data, file, indent=4)

def analyze_text(texto, json_unico):
    respuestagpt = texto

    # Extract commands
    commands = extract_commands(respuestagpt)
    comandos_terminal = extract_terminal(respuestagpt)
    
    
    # Execute and save the result from commands coming from terminal
    results = ""
    if comandos_terminal != "":
        for commando_t in comandos_terminal:
            stdout, stderr = execute_command(commando_t)
            print("")
            print(" - - - - - - - - ")
            if stdout:
                print(f"Command result: '{commando_t}':\n{stdout}")
                results += f"Command result: '{commando_t}':\n{stdout}\n"
            if stderr:
                print(f"Error while executing the command: '{commando_t}':\n{stderr}")
                results += f"Error while executing the command: '{commando_t}':\n{stderr}\n"
            # Save the last result into a TXT
            save_results_to_file(commando_t, results, "./logs/commands/result.txt")
            
            # Save the last result into a JSON
            save_results_to_json(commando_t, results, f"./logs/commands/{json_unico}")
                
    
    # Save commands coming from user input and labeled with <code>
    results = ""
    if commands != "":
        for command in commands:
            print("")
            execute = input(f"Â¿Would you like to execute the command: '{command}'? (y/N): ")
            # if execute.lower() == 'y' or execute == "":
            if execute.lower() == 'y':
                stdout, stderr = execute_command(command)
                print("")
                print(" - - - - - - - - ")
                if stdout:
                    print(f"Command result: '{command}':\n{stdout}")
                    results += f"Command result: '{command}':\n{stdout}\n"
                if stderr:
                    print(f"Error while executing the command: '{command}':\n{stderr}")
                    results += f"Error while executing the command: '{command}':\n{stderr}\n"
                # Save the last result into a TXT
                save_results_to_file(command, results, "./logs/commands/result.txt")
                
                # Save the last result into a JSON
                save_results_to_json(command, results, f"./logs/commands/{json_unico}")

if __name__ == "__main__":
    analyze_text()